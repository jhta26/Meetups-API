{
  "_args": [
    [
      {
        "raw": "property-expr@^1.2.0",
        "scope": null,
        "escapedName": "property-expr",
        "name": "property-expr",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/Users/jasonhsu/reactNativeProject/MeetupsMap-API/node_modules/yup"
    ]
  ],
  "_from": "property-expr@>=1.2.0 <2.0.0",
  "_id": "property-expr@1.3.1",
  "_inCache": true,
  "_location": "/property-expr",
  "_npmUser": {
    "name": "monastic.panic",
    "email": "monastic.panic@gmail.com"
  },
  "_npmVersion": "1.4.27",
  "_phantomChildren": {},
  "_requested": {
    "raw": "property-expr@^1.2.0",
    "scope": null,
    "escapedName": "property-expr",
    "name": "property-expr",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/yup"
  ],
  "_resolved": "https://registry.npmjs.org/property-expr/-/property-expr-1.3.1.tgz",
  "_shasum": "53f4af8ecd3c6db00ed98b8e0f6affbe880faa0a",
  "_shrinkwrap": null,
  "_spec": "property-expr@^1.2.0",
  "_where": "/Users/jasonhsu/reactNativeProject/MeetupsMap-API/node_modules/yup",
  "author": {
    "name": "@theporchrat Jason Quense"
  },
  "bugs": {
    "url": "https://github.com/theporchrat/expr/issues"
  },
  "dependencies": {},
  "description": "tiny util for getting and setting deep object props safely",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "53f4af8ecd3c6db00ed98b8e0f6affbe880faa0a",
    "tarball": "https://registry.npmjs.org/property-expr/-/property-expr-1.3.1.tgz"
  },
  "gitHead": "2b0b62fa333c8d03a2c17f3365a6d801e8184068",
  "homepage": "https://github.com/theporchrat/expr#readme",
  "keywords": [
    "expr",
    "expression",
    "setter",
    "getter",
    "deep",
    "property",
    "Justin-Beiber",
    "accessor"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "monastic.panic",
      "email": "monastic.panic@gmail.com"
    }
  ],
  "name": "property-expr",
  "optionalDependencies": {},
  "readme": "expr\r\n=======\r\n\r\nTiny expression helper for creating compiled accessors; handles most stuff, including [\"bracket notation\"] for property access. Originally based off of Kendo UI Core expression code\r\n\r\n    npm install property-expr\r\n\r\n## Use\r\n\r\nSetters and getters are compiled to functions and cached for Performanceâ„¢\r\n\r\n    var expr = require('property-expr')\r\n      , obj = {\r\n        foo: {\r\n          bar: [ \"hi\", { buz: { baz: 'found me!' } }]\r\n        }\r\n      };\r\n\r\n    var getBaz = expr.getter('foo.bar[1][\"buz\"].baz')\r\n      , setBaz = expr.setter('foo.bar[1][\"buz\"].baz')\r\n\r\n    console.log(getBaz(obj)) // => 'found me!'\r\n    setBaz(obj, 'set me!')\r\n    console.log(foo.bar[1].buz.baz) // => 'set me!'\r\n\r\n### `getter(expression, [ safeAccess ])`\r\n\r\nreturns a function that accepts an obj and returns the value at the supplied expression. You can create a \"safe\" getter, which won't error out when accessing properties that don't exist, reducing existance checks befroe property access:\r\n\r\n    expr.getter('foo.bar.baz', true)({ foo: {} }) // => undefined\r\n    //instead of val = foo.bar && foo.bar.baz\r\n\r\n### `setter(expression)`\r\n\r\nreturns a function that accepts an obj and a value and sets the property pointed to by the expression to the supplied value.\r\n\r\n\r\n### `expr(expression, [ safeAccess], [ paramName = 'data'])`\r\n\r\nReturns a normalized expression string pointing to a property on root object \r\n`paramName`.\r\n\r\n    expr.expr(\"foo['bar'][0].baz\", true, 'obj') // => \"(((obj.foo || {})['bar'] || {})[0])\"\r\n\r\n### `split(path) -> Array`\r\n\r\nReturns an array of each path segment.\r\n\r\n```js\r\n split(\"foo['bar'][0].baz\") // [ \"foo\", \"'bar'\", \"0\", \"baz\"]\r\n```\r\n\r\n### `forEach(path, iterator[, thisArg]) `\r\n\r\nIterate through a path but segment, with some additional helpful metadata about the segment. The iterator function is called with: `pathSegment`, `isBracket`, `isArray`, `idx`, `segments`\r\n\r\n```js\r\n.forEach('foo[\"bar\"][1]', function(pathSegment, isBracket, isArray, idx, segments) {\r\n  // 'foo'   -> isBracket = false, isArray = false, idx = 0\r\n  // '\"bar\"' -> isBracket = true,  isArray = false, idx = 1\r\n  // '0'     -> isBracket = false, isArray = true,  idx = 2\r\n}\r\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/theporchrat/expr.git"
  },
  "scripts": {
    "test": "node ./test.js"
  },
  "version": "1.3.1"
}
