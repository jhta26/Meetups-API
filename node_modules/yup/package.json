{
  "_args": [
    [
      {
        "raw": "yup",
        "scope": null,
        "escapedName": "yup",
        "name": "yup",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jasonhsu/reactNativeProject/MeetupsMap-API"
    ]
  ],
  "_from": "yup@latest",
  "_id": "yup@0.23.0",
  "_inCache": true,
  "_location": "/yup",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/yup-0.23.0.tgz_1507828132620_0.6761163163464516"
  },
  "_npmUser": {
    "name": "monastic.panic",
    "email": "monastic.panic@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "yup",
    "scope": null,
    "escapedName": "yup",
    "name": "yup",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/yup/-/yup-0.23.0.tgz",
  "_shasum": "5901e80bec60c65fcfe0267f382b8ab2b27aa168",
  "_shrinkwrap": null,
  "_spec": "yup",
  "_where": "/Users/jasonhsu/reactNativeProject/MeetupsMap-API",
  "author": {
    "name": "@monasticpanic Jason Quense"
  },
  "bugs": {
    "url": "https://github.com/jquense/yup/issues"
  },
  "dependencies": {
    "case": "^1.2.1",
    "fn-name": "~1.0.1",
    "lodash": "^4.17.0",
    "property-expr": "^1.2.0",
    "synchronous-promise": "^1.0.18",
    "toposort": "^0.2.10",
    "type-name": "^2.0.1"
  },
  "description": "Dead simple Object schema validation",
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-eslint": "^6.0.2",
    "babel-jest": "^20.0.3",
    "babel-polyfill": "^6.7.4",
    "babel-preset-jason": "^3.1.0",
    "benchmark": "^2.0.0",
    "chai": "^3.5.0",
    "chai-as-promised": "^5.3.0",
    "dirty-chai": "^1.2.2",
    "doctoc": "^1.0.0",
    "eslint": "^3.4.0",
    "eslint-config-jason": "^4.0.0",
    "eslint-plugin-import": "^1.14.0",
    "eslint-plugin-react": "^6.2.0",
    "jest": "^20.0.3",
    "mt-changelog": "^0.6.2",
    "promises-aplus-tests": "^2.1.2",
    "release-script": "^0.5.2",
    "sinon": "^1.17.7",
    "sinon-chai": "^2.10.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-sqEc4e7Ka0h5RY85Lh0aFIJ7CSTb/f1baO506Eu1GpFVfDA3iq7ZuyqnIthd+BGpMY7GIx9jsk2qqIFOlvQD4Q==",
    "shasum": "5901e80bec60c65fcfe0267f382b8ab2b27aa168",
    "tarball": "https://registry.npmjs.org/yup/-/yup-0.23.0.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "892e6ec84748de1a330f2bacfd74f2c01d36abc2",
  "homepage": "https://github.com/jquense/yup",
  "jest": {
    "testEnvironment": "node",
    "setupTestFrameworkScriptFile": "./test-setup.js",
    "roots": [
      "test"
    ],
    "testRegex": "\\.js",
    "testPathIgnorePatterns": [
      "helpers\\.js"
    ]
  },
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "monastic.panic",
      "email": "monastic.panic@gmail.com"
    }
  ],
  "name": "yup",
  "optionalDependencies": {},
  "readme": "\nYup\n=======================\n\nYup is a JavaScript object schema validator and object parser. The API and style is ~~stolen~~ heavily inspired\nby [Joi](https://github.com/hapijs/joi), which is an amazing library but is generally too large and difficult\nto package for use in a browser. Yup is a leaner in the same spirit without some of the fancy features.\nYou can use it on the server as well, but in that case you might as well just use Joi.\n\nYup is also a good bit less opinionated than joi, allowing for custom transformations and async validation.\nIt also allows \"stacking\" conditions via `when` for properties that depend on more than one other sibling or\nchild property. Yup separates the parsing and validating functions into separate steps so it can be used to parse\njson separate from validating it, via the `cast` method.\n\n**Try it out:** https://runkit.com/jquense/yup#\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Using a custom locale dictionary](#using-a-custom-locale-dictionary)\n- [API](#api)\n  - [`yup`](#yup)\n    - [`yup.reach(schema: Schema, path: string, value: ?object, context: ?object): Schema`](#yupreachschema-schema-path-string-value-object-context-object-schema)\n    - [`yup.addMethod(schemaType: Schema, name: string, method: ()=> Schema): void`](#yupaddmethodschematype-schema-name-string-method--schema-void)\n    - [`yup.ref(path: string, options: { contextPrefix: string }): Ref`](#yuprefpath-string-options--contextprefix-string--ref)\n    - [`yup.lazy((value: any) => Schema): Lazy`](#yuplazyvalue-any--schema-lazy)\n    - [`ValidationError(errors: string | Array<string>, value: any, path: string)`](#validationerrorerrors-string--arraystring-value-any-path-string)\n  - [mixed](#mixed)\n    - [`mixed.clone(): Schema`](#mixedclone-schema)\n    - [`mixed.label(label: string): Schema`](#mixedlabellabel-string-schema)\n    - [`mixed.meta(metadata: object): Schema`](#mixedmetametadata-object-schema)\n    - [`mixed.describe(): SchemaDescription`](#mixeddescribe-schemadescription)\n    - [`mixed.concat(schema: Schema)`](#mixedconcatschema-schema)\n    - [`mixed.validate(value: any, options: ?object): Promise<any, ValidationError>`](#mixedvalidatevalue-any-options-object-promiseany-validationerror)\n    - [`mixed.validateSync(value: any, options: ?object): any`](#mixedvalidatesyncvalue-any-options-object-any)\n    - [`mixed.isValid(value: any, options: ?object): Promise<boolean>`](#mixedisvalidvalue-any-options-object-promiseboolean)\n    - [`mixed.isValidSync(value: any, options: ?object): boolean`](#mixedisvalidsyncvalue-any-options-object-boolean)\n    - [`mixed.cast(value: any): any`](#mixedcastvalue-any-any)\n    - [`mixed.isType(value: any): boolean`](#mixedistypevalue-any-boolean)\n    - [`mixed.strict(isStrict: boolean = false): Schema`](#mixedstrictisstrict-boolean--false-schema)\n    - [`mixed.strip(stripField: boolean = true): Schema`](#mixedstripstripfield-boolean--true-schema)\n    - [`mixed.withMutation(builder: (current: Schema) => void): void`](#mixedwithmutationbuilder-current-schema--void-void)\n    - [`mixed.default(value: any): Schema`](#mixeddefaultvalue-any-schema)\n    - [`mixed.default(): Any`](#mixeddefault-any)\n    - [`mixed.nullable(isNullable: boolean = false): Schema`](#mixednullableisnullable-boolean--false-schema)\n    - [`mixed.required(message: ?string): Schema`](#mixedrequiredmessage-string-schema)\n    - [`mixed.typeError(message: string): Schema`](#mixedtypeerrormessage-string-schema)\n    - [`mixed.oneOf(arrayOfValues: Array<any>, string: ?message): Schema` Alias: `equals`](#mixedoneofarrayofvalues-arrayany-string-message-schema-alias-equals)\n    - [`mixed.notOneOf(arrayOfValues: Array<any>, string: ?message)`](#mixednotoneofarrayofvalues-arrayany-string-message)\n    - [`mixed.when(keys: string | Array<string>, builder: object | (value, schema)=> Schema): Schema`](#mixedwhenkeys-string--arraystring-builder-object--value-schema-schema-schema)\n    - [`mixed.test(name: string, message: string, test: function): Schema`](#mixedtestname-string-message-string-test-function-schema)\n    - [`mixed.test(options: object): Schema`](#mixedtestoptions-object-schema)\n    - [`mixed.transform((currentValue: any, originalValue: any) => any): Schema`](#mixedtransformcurrentvalue-any-originalvalue-any--any-schema)\n  - [string](#string)\n    - [`string.required(message: ?string): Schema`](#stringrequiredmessage-string-schema)\n    - [`string.min(limit: number | Ref, message: ?string): Schema`](#stringminlimit-number--ref-message-string-schema)\n    - [`string.max(limit: number | Ref, message: ?string): Schema`](#stringmaxlimit-number--ref-message-string-schema)\n    - [`string.matches(regex: Regex, message: ?string): Schema`](#stringmatchesregex-regex-message-string-schema)\n    - [`string.matches(regex: Regex, options: { message: string, excludeEmptyString: bool }): Schema`](#stringmatchesregex-regex-options--message-string-excludeemptystring-bool--schema)\n    - [`string.email(message: ?string): Schema`](#stringemailmessage-string-schema)\n    - [`string.url(message: ?string): Schema`](#stringurlmessage-string-schema)\n    - [`string.ensure(): Schema`](#stringensure-schema)\n    - [`string.trim(message: ?string): Schema`](#stringtrimmessage-string-schema)\n    - [`string.lowercase(message: ?string): Schema`](#stringlowercasemessage-string-schema)\n    - [`string.uppercase(message: ?string): Schema`](#stringuppercasemessage-string-schema)\n  - [number](#number)\n    - [`number.min(limit: number | Ref, message: ?string): Schema`](#numberminlimit-number--ref-message-string-schema)\n    - [`number.max(limit: number | Ref, message: ?string): Schema`](#numbermaxlimit-number--ref-message-string-schema)\n    - [`number.positive(message: ?string): Schema`](#numberpositivemessage-string-schema)\n    - [`number.negative(message: ?string): Schema`](#numbernegativemessage-string-schema)\n    - [`number.integer(message: ?string): Schema`](#numberintegermessage-string-schema)\n    - [`number.truncate(): Schema`](#numbertruncate-schema)\n    - [`number.round(type: 'floor' | 'ceil' | 'trunc' | 'round' = 'round'): Schema`](#numberroundtype-floor--ceil--trunc--round--round-schema)\n  - [boolean](#boolean)\n  - [date](#date)\n    - [`date.min(limit: Date | string | Ref, message: ?string): Schema`](#dateminlimit-date--string--ref-message-string-schema)\n    - [`date.max(limit: Date | string | Ref, message: ?string): Schema`](#datemaxlimit-date--string--ref-message-string-schema)\n  - [array](#array)\n    - [`array.of(type: Schema): Schema`](#arrayoftype-schema-schema)\n    - [`array.required(message: ?string): Schema`](#arrayrequiredmessage-string-schema)\n    - [`array.min(limit: number | Ref, message: ?string): Schema`](#arrayminlimit-number--ref-message-string-schema)\n    - [`array.max(limit: number | Ref, message: ?string): Schema`](#arraymaxlimit-number--ref-message-string-schema)\n    - [`array.ensure(): Schema`](#arrayensure-schema)\n    - [`array.compact(rejector: (value) => boolean): Schema`](#arraycompactrejector-value--boolean-schema)\n  - [object](#object)\n    - [`object.shape(fields: object, noSortEdges: ?Array<[string, string]>): Schema`](#objectshapefields-object-nosortedges-arraystring-string-schema)\n    - [`object.from(fromKey: string, toKey: string, alias: boolean = false): Schema`](#objectfromfromkey-string-tokey-string-alias-boolean--false-schema)\n    - [`object.noUnknown(onlyKnownKeys: boolean = true, message: ?string): Schema`](#objectnounknownonlyknownkeys-boolean--true-message-string-schema)\n    - [`object.camelCase(): Schema`](#objectcamelcase-schema)\n    - [`object.constantCase(): Schema`](#objectconstantcase-schema)\n- [Extending Schema Types](#extending-schema-types)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Install\n\n```sh\nnpm install -S yup\n```\n\nYup always relies on the `Promise` global object to handle asynchronous values as well `Set`.\nFor browsers that do not support these, you'll need to include a polyfill, such as core-js:\n\n```js\nimport 'core-js/es6/promise';\nimport 'core-js/es6/set';\n```\n\n## Usage\n\nYou define and create schema objects. Schema objects are immutable, so each call of a method returns a _new_ schema object.\n\n__try it out using tonicdev! https://tonicdev.com/570c52590a85f71200eb09ba/yup__\n\n```js\nvar yup = require('yup')\n\nvar schema = yup.object().shape({\n  name:      yup.string().required(),\n  age:       yup.number().required().positive().integer(),\n  email:     yup.string().email(),\n  website:   yup.string().url(),\n  createdOn: yup.date().default(function() {\n    return new Date\n  })\n})\n\n//check validity\nschema.isValid({\n  name: 'jimmy',\n  age: 24\n})\n.then(function(valid){\n  valid // => true\n})\n\n\n//you can try and type cast objects to the defined schema\nschema.cast({\n  name: 'jimmy',\n  age: '24',\n  createdOn: '2014-09-23T19:25:25Z'\n})\n// => { name: 'jimmy', age: 24, createdOn: Date }\n```\n\n### Using a custom locale dictionary\nAllows you to customize the default messages used by Yup, when no message is provided with a validation test.\nIf any message is missing in the custom dictionary the error message will default to Yup's one.\n```js\nimport { setLocale } from 'yup/lib/customLocale'\n\nsetLocale({\n  mixed: {\n    default: 'Não é válido',\n  },\n  number: {\n    min: 'Deve ser maior que ${min}',\n  },\n})\n\n// Now use Yup schemas AFTER you defined your custom dicionary\nconst schema = yup.object().shape({\n  name: yup.string(),\n  age: yup.number().min(18),\n})\nschema.validate({ name: 'jimmy', age: 11 })\n  .catch(function(err){\n    err.name   // 'ValidationError'\n    err.errors // => ['Deve ser maior que 18']\n  })\n```\n\n## API\n\n### `yup`\n\nThe module export.\n\n```js\nvar yup = require('yup')\n\nyup.mixed\nyup.string\nyup.number\nyup.boolean // also aliased as yup.bool\nyup.date\nyup.object\nyup.array\n\nyup.reach\nyup.addMethod\nyup.ValidationError\n```\n\n#### `yup.reach(schema: Schema, path: string, value: ?object, context: ?object): Schema`\n\nFor nested schema's `yup.reach` will retrieve a nested schema based on the provided path.\n\nFor nested schema that need to resolve dynamically, you can provide a `value` and optionally\na `context` object.\n\n```js\nvar schema = object().shape({\n      nested: object()\n        .shape({\n          arr: array().of(\n            object().shape({ num: number().max(4) }))\n      })\n    })\n\nreach(schema, 'nested.arr.num')\nreach(schema, 'nested.arr[].num')\nreach(schema, 'nested.arr[1].num')\nreach(schema, 'nested[\"arr\"][1].num')\n```\n\n#### `yup.addMethod(schemaType: Schema, name: string, method: ()=> Schema): void`\n\nAdds a new method to the core schema types. A friendlier convenience method for `schemaType.prototype[name] = method`.\n\n```js\n  yup.addMethod(yup.date, 'format', function(formats, parseStrict) {\n\n    return this.transform(function(value, originalValue){\n\n      if ( this.isType(value) ) return value\n\n      value = Moment(originalValue, formats, parseStrict)\n\n      return date.isValid() ? date.toDate() : invalidDate\n    })\n  })\n```\n\n#### `yup.ref(path: string, options: { contextPrefix: string }): Ref`\n\nCreates a reference to another sibling or sibling descendant field. Ref's are resolved\nat _validation/cast time_ and supported where specified. Ref's are evaluated in in the proper order so that\nthe ref value is resolved before the field using the ref (be careful of circular dependencies!).\n\n```js\nvar schema = object({\n  baz: ref('foo.bar'),\n  foo: object({\n    bar: string()\n  })\n  x: ref('$x')\n})\n\ninst.cast({ foo: { bar: 'boom' } }, { context: { x: 5 } })\n// { baz: 'boom',  x: 5, { foo: { bar: 'boom' } }, }\n```\n\n#### `yup.lazy((value: any) => Schema): Lazy`\n\ncreates a schema that is evaluated at validation/cast time. Useful for creating\nrecursive schema like Trees, for polymophic fields and arrays.\n\n__CAUTION!__ When defining parent-child recursive object schema, you want to reset the `default()`\nto `undefined` on the child otherwise the object will infinitely nest itself when you cast it!.\n\n```js\nvar node = object({\n  id: number(),\n  child: yup.lazy(() =>\n    node.default(undefined)\n  )\n})\n\nlet renderable = yup.lazy(value => {\n  switch (typeof value) {\n    case 'number':\n      return number()\n    case 'string':\n      return string()\n    default:\n      return mixed()\n  }\n})\n\nlet renderables = array().of(renderable)\n```\n\n#### `ValidationError(errors: string | Array<string>, value: any, path: string)`\n\nThrown on failed validations, with the following properties\n - `name`: \"ValidationError\"\n - `path`: a string, indicating where there error was thrown. `path` is empty at the root level.\n - `errors`: array of error messages\n - `inner`: in the case of aggregate errors, inner is an array of `ValidationErrors` throw earlier in the\n validation chain. When the `abortEarly` option is `false` this is where you can inspect each error thrown,\n alternatively `errors` will have all the of the messages from each inner error.\n\n### mixed\n\nCreates a schema that matches all types. All types inherit from this base type\n\n```javascript\nvar schema = yup.mixed();\nschema.isValid(undefined, function(valid){\n  valid //=> true\n})\n```\n\n#### `mixed.clone(): Schema`\n\nCreates a deep copy of the schema. Clone is used internally to return a new schema with every schema state change.\n\n#### `mixed.label(label: string): Schema`\n\nOverrides the key name which is used in error messages.\n\n#### `mixed.meta(metadata: object): Schema`\n\nAdds to a metadata object, useful for storing data with a schema, that doesn't belong\nthe cast object itself.\n\n#### `mixed.describe(): SchemaDescription`\n\nCollects schema details (like meta, labels, and active tests) into a serializable\ndescription object.\n\n```\nSchemaDescription {\n  type: string,\n  label: string,\n  meta: object,\n  tests: Array<string>\n}\n```\n\n#### `mixed.concat(schema: Schema)`\n\nCreates a new instance of the schema by combining two schemas. Only schemas of the same type can be concatenated.\n\n#### `mixed.validate(value: any, options: ?object): Promise<any, ValidationError>`\n\nReturns the value (a cast value if `isStrict` is `false`) if the value is valid, and returns the errors otherwise.\nThis method is __asynchronous__ and returns a Promise object, that is fulfilled with the value, or rejected\nwith a `ValidationError`.\n\nThe `options` argument is an object hash containing any schema options you may want to override\n(or specify for the first time).\n\n```js\nOptions = {\n  strict: boolean = false;\n  abortEarly: boolean = true;\n  stripUnknown: boolean = false;\n  recursive: boolean = true;\n  context: ?object;\n}\n```\n- `strict`: only validate the input, and skip and coercion or transformation\n- `abortEarly`: return from validation methods on the first error rather\nthan after all validations run.\n- `stripUnknown`: remove unspecified keys from objects.\n- `recursive`: when `false` validations will not descend into nested schema\n(relevant for objects or arrays).\n- `context`: any context needed for validating schema conditions (see: `when()`)\n\n```js\nschema.validate({ name: 'jimmy',age: 24 })\n  .then(function(value){\n    value // => { name: 'jimmy',age: 24 }\n  })\n\nschema.validate({ name: 'jimmy', age: 'hi' })\n  .catch(function(err){\n    err.name   // 'ValidationError'\n    err.errors // => ['age must be a number']\n  })\n```\n\n#### `mixed.validateSync(value: any, options: ?object): any`\n\nRuns validatations synchronously _if possible_ and returns the resulting value,\nor throws a ValidationError. Accepts all the same options as `validate`.\n\nSynchronous validation only works if there are no configured async tests, e.g tests that return a Promise.\nFor instance this will work:\n\n```js\nschema = number.test(\n  'is-42',\n  'this isn\\'t the number i want',\n  value => value != 42\n)\n\nschema.validateSync(23) // throws ValidationError\n```\n\nhowever this will not:\n\n```js\nschema = number.test(\n  'is-42',\n  'this isn\\'t the number i want',\n  value => Promise.resolve(value != 42)\n)\n\nschema.validateSync(42) // throws Error\n```\n\n#### `mixed.isValid(value: any, options: ?object): Promise<boolean>`\n\nReturns `true` when the passed in value matches the schema. `isValid`\nis __asynchronous__ and returns a Promise object.\n\nTakes the same options as `validate()`.\n\n#### `mixed.isValidSync(value: any, options: ?object): boolean`\n\nSynchronously returns `true` when the passed in value matches the schema.\n\nTakes the same options as `validateSync()` and has the same caveats around async tests.\n\n#### `mixed.cast(value: any): any`\n\nAttempts to coerce the passed in value to a value that matches the schema. For example: `'5'` will\ncast to `5` when using the `number()` type. Failed casts generally return `null`, but may also\nreturn results like `NaN` and unexpected strings.\n\n#### `mixed.isType(value: any): boolean`\n\nRuns a type check against the passed in `value`. It returns true if it matches,\nit does not cast the value. When `nullable()` is set `null` is considered a valid value of the type.\nYou should use `isType` for all Schema type checks.\n\n#### `mixed.strict(isStrict: boolean = false): Schema`\n\nSets the `strict` option to `true`. Strict schemas skip coercion and transformation attempts,\nvalidating the value \"as is\".\n\n#### `mixed.strip(stripField: boolean = true): Schema`\n\nMarks a schema to be removed from an output object. Only works as a nested schema.\n\n```js\nlet schema = object({\n  useThis: number(),\n  notThis: string().strip()\n})\n\nschema.cast({ notThis: 'foo', useThis: 4 }) // { useThis: 4 }\n```\n\n#### `mixed.withMutation(builder: (current: Schema) => void): void`\n\nFirst the legally required Rich Hickey quote:\n\n> If a tree falls in the woods, does it make a sound?\n>\n> If a pure function mutates some local data in order to produce an immutable return value, is that ok?\n\n`withMutation` allows you to mutate the schema in place, instead of the default behavior which clones before each change.\nGenerally this isn't necessary since the vast majority of schema changes happen during the initial\ndeclaration, and only happen once over the lifetime of the schema, so performance isn't an issue.\nHowever certain mutations _do_ occur at cast/validation time, (such as conditional schema using `when()`), or\nwhen instantiating a schema object.\n\n```js\nobject()\n  .shape({ key: string() })\n  .withMutation(schema => {\n    return arrayOfObjectTests.forEach(test => {\n      schema.test(test)\n    })\n  })\n```\n\n#### `mixed.default(value: any): Schema`\n\nSets a default value to use when the value is `undefined`.\nDefaults are created after transformations are executed, but before validations, to help ensure that safe\ndefaults are specified. The default value will be cloned on each use, which can incur performance penalty\nfor objects and arrays. To avoid this overhead you can also pass a function that returns an new default.\nNote that `null` is considered a separate non-empty value.\n\n```js\n  yup.string.default('nothing');\n\n  yup.object.default({ number: 5}); // object will be cloned every time a default is needed\n\n  yup.object.default(() => ({ number: 5})); // this is cheaper\n\n  yup.date.default(() => new Date()); //also helpful for defaults that change over time\n\n```\n\n#### `mixed.default(): Any`\n\nCalling `default` with no arguments will return the current default value\n\n\n#### `mixed.nullable(isNullable: boolean = false): Schema`\n\nIndicates that `null` is a valid value for the schema. Without `nullable()`\n`null` is treated as a different type and will fail `isType()` checks.\n\n#### `mixed.required(message: ?string): Schema`\n\nMark the schema as required. All field values apart from `undefined` meet this requirement.\n\n#### `mixed.typeError(message: string): Schema`\n\nDefine an error message for failed type checks. The `${value}` and `${type}` interpolation can\nbe used in the `message` argument.\n\n#### `mixed.oneOf(arrayOfValues: Array<any>, string: ?message): Schema` Alias: `equals`\n\nWhitelist a set of values. Values added are automatically removed from any blacklist if they are in it.\nThe `${values}` interpolation can be used in the `message` argument.\n\n```javascript\nvar schema = yup.mixed().oneOf(['jimmy', 42]);\nschema.isValid(42)       //=> true\nschema.isValid('jimmy')  //=> true\nschema.isValid(new Date) //=> false\n```\n\n#### `mixed.notOneOf(arrayOfValues: Array<any>, string: ?message)`\n\nBlacklist a set of values. Values added are automatically removed from any whitelist if they are in it.\nThe `${values}` interpolation can be used in the `message` argument.\n\n```javascript\nvar schema = yup.mixed().notOneOf(['jimmy', 42]);\nschema.isValid(42)       //=> false\nschema.isValid(new Date) //=> true\n```\n\n#### `mixed.when(keys: string | Array<string>, builder: object | (value, schema)=> Schema): Schema`\n\nAdjust the schema based on a sibling or sibling children fields. You can provide an object\nliteral where the key `is` is value or a matcher function, `then` provides the true schema and/or\n`otherwise` for the failure condition.\n\n`is` conditions are strictly compared (`===`) if you want to use a different form of equality you\ncan provide a function like: `is: (value) => value == true`.\n\nLike joi you can also prefix properties with `$` to specify a property that is dependent\non `context` passed in by `validate()` or `isValid`. `when` conditions are additive.\n\n```javascript\nvar inst = yup.object({\n      isBig: yup.boolean(),\n      count: yup.number()\n        .when('isBig', {\n          is: true,  // alternatively: (val) => val == true\n          then:      yup.number().min(5),\n          otherwise: yup.number().min(0)\n        })\n        .when('$other', (other, schema) => other === 4\n          ? schema.max(6)\n          : schema)\n    })\n\ninst.validate(value, { context: { other: 4 }})\n```\n\nYou can also specify more than one dependent key, in which case each value will be spread as an argument.\n\n```javascript\nvar inst = yup.object({\n      isSpecial: yup.bool()\n      isBig: yup.bool(),\n      count: yup.number()\n        .when(['isBig', 'isSpecial'], {\n          is: true,  // alternatively: (isBig, isSpecial) => isBig && isSpecial\n          then:      yup.number().min(5),\n          otherwise: yup.number().min(0)\n        })\n    })\n\ninst.validate({\n  isBig: true,\n  isSpecial: true,\n  count: 10\n})\n```\n\nAlternatively you can provide a function the returns a schema\n(called with the value of the key and the current schema).\n\n```js\nvar inst = yup.object({\n      isBig: yup.boolean(),\n      count: yup.number()\n        .when('isBig', (isBig, schema) => {\n          return isBig ? schema.min(5) : schema.min(0)\n        })\n    })\n\ninst.validate({ isBig: false, count: 4 })\n```\n\n\n#### `mixed.test(name: string, message: string, test: function): Schema`\n\nAdds a test function to the validation chain. Tests are run after any object is cast.\nMany types have some tests built in, but you can create custom ones easily.\nIn order to allow asynchronous custom validations _all_ (or no) tests are run asynchronously.\nA consequence of this is that test execution order cannot be guaranteed.\n\nAll tests must provide a `name`, an error `message` and a validation function that must return\n`true` or `false` or a `ValidationError`. To make a test async return a promise that resolves `true`\nor `false` or a `ValidationError`.\n\nfor the `message` argument you can provide a string which is will interpolate certain values\nif specified using the `${param}` syntax. By default all test messages are passed a `path` value\nwhich is valuable in nested schemas.\n\nthe `test` function is called with the current `value`. For more advanced validations you can\nuse the alternate signature to provide more options (see below):\n\n```js\nvar jimmySchema = yup.string()\n  .test('is-jimmy', '${path} is not Jimmy', value => value === 'jimmy');\n\n// or make it async by returning a promise\nvar asyncJimmySchema = yup.string()\n  .test('is-jimmy', '${path} is not Jimmy', function (value){\n    return fetch('/is-jimmy/' + value)\n      .then(response => response.responseText === 'true')\n  });\n\nschema.isValid('jimmy').then(...) //=> true\n\nschema.isValid('john').then(...) //=> false\nschema.errors // => [ 'this is not Jimmy!']\n\n```\n\ntest functions are called with a special context, or `this` value, that exposes some useful metadata and functions.\n\n- `this.path`: the string path of the current validation\n- `this.schema`: the resolved schema object that the test is running against.\n- `this.options`: the `options` object that validate() or isValid() was called with\n- `this.parent`:  in the case of nested schema, this is the value of the parent object\n- `this.createError(Object: { path: String, message: String })`: create and return a\nvalidation error. Useful for dynamically setting the `path`, or more likely, the error `message`.\nIf either option is omitted it will use the current path, or default message.\n\n\n#### `mixed.test(options: object): Schema`\n\nAlternative `test(..)` signature. `options` is an object containing some of the following options:\n\n```js\nOptions = {\n  // Unique name identifying the test\n  name: string;\n  // test function, determines schema validity\n  test: (value: any) => boolean;\n  // The validation error message\n  message: string;\n  // values passed to message for interpolation\n  params: ?object;\n  // mark the test as exclusive, meaning only one of the same can be active at once\n  exclusive: boolean = false;\n}\n```\n\nIn the case of mixing exclusive and non-exclusive tests the following logic is used.\nIf a non-exclusive test is added to a schema with an exclusive test of the same name\nthe exclusive test is removed and further tests of the same name will be stacked.\n\nIf an exclusive test is added to a schema with non-exclusive tests of the same name\nthe previous tests are removed and further tests of the same name will replace each other.\n\n```javascript\nvar schema = yup.mixed().test({\n      name: 'max',\n      exclusive: true,\n      params: { max },\n      message: '${path} must be less than ${max} characters',\n      test: value => value == null || value.length <= max\n    });\n```\n\n#### `mixed.transform((currentValue: any, originalValue: any) => any): Schema`\n\nAdds a transformation to the transform chain. Transformations are central to the casting process,\ndefault transforms for each type coerce values to the specific type (as verified by [`isType()`](mixedistypevalue)).\ntransforms are run before validations and only applied when `strict` is `true`. Some types have built in transformations.\n\nTransformations are useful for arbitrarily altering how the object is cast, __however, you should take care\nnot to mutate the passed in value.__ Transforms are run sequentially so each `value` represents the\ncurrent state of the cast, you can use the `originalValue` param if you need to work on the raw initial value.\n\n```javascript\nvar schema = yup.string().transform(function(currentValue, originalvalue){\n  return this.isType(value) && value !== null\n    ? value.toUpperCase()\n    : value\n});\n\nschema.cast('jimmy') //=> 'JIMMY'\n```\n\nEach types will handle basic coercion of values to the proper type for you, but occasionally\nyou may want to adjust or refine the default behavior. For example, if you wanted to use a different\ndate parsing strategy than the default one you could do that with a transform.\n\n```js\nyup.date().transform(function(formats = 'MMM dd, yyyy'){\n  //check to see if the previous transform already parsed the date\n  if ( this.isType(value) ) return value\n\n  //the default coercion failed so lets try it with Moment.js instead\n  value = Moment(originalValue, formats)\n\n  //if its valid return the date object, otherwise return an `InvalidDate`\n  return date.isValid() ? date.toDate() : new Date('')\n})\n```\n\n### string\n\nDefine a string schema. Supports all the same methods as [`mixed`](#mixed).\n\n```javascript\nvar schema = yup.string();\nschema.isValid('hello') //=> true\n```\n\nBy default, the `cast` logic of `string` is to call `toString` on the value if it exists.\nempty values are not coerced (use `ensure()` to coerce empty values to empty strings).\n\nFailed casts return the input value.\n\n#### `string.required(message: ?string): Schema`\n\nThe same as the `mixed()` schema required, except that empty strings are also considered 'missing' values.\nTo allow empty strings but fail on `undefined` values use: `string().required().min(0)`\n\n#### `string.min(limit: number | Ref, message: ?string): Schema`\n\nSet an minimum length limit for the string value. The `${min}` interpolation can be used in the `message` argument\n\n#### `string.max(limit: number | Ref, message: ?string): Schema`\n\nSet an maximum length limit for the string value. The `${max}` interpolation can be used in the `message` argument\n\n#### `string.matches(regex: Regex, message: ?string): Schema`\n\nProvide an arbitrary `regex` to match the value against.\n\n```javascript\nvar v = string().matches(/(hi|bye)/);\nv.isValid('hi').should.eventually().equal(true)\nv.isValid('nope').should.eventually().equal(false)\n```\n\n#### `string.matches(regex: Regex, options: { message: string, excludeEmptyString: bool }): Schema`\n\nAn alternate signature for `string.matches` with an options object. `excludeEmptyString`, when true,\nshort circuits the regex test when the value is an empty string\n\n```javascript\nvar v = string().matches(/(hi|bye)/, { excludeEmptyString: true });\nv.isValid('').should.eventually().equal(false)\n```\n\n#### `string.email(message: ?string): Schema`\n\nValidates the value as an email address via a regex.\n\n#### `string.url(message: ?string): Schema`\n\nValidates the value as a valid URL via a regex.\n\n#### `string.ensure(): Schema`\n\nTransforms `undefined` and `null` values to an empty string along with\nsetting the `default` to an empty string.\n\n#### `string.trim(message: ?string): Schema`\n\nTransforms string values by removing leading and trailing whitespace. If\n`strict()` is set it will only validate that the value is trimmed.\n\n#### `string.lowercase(message: ?string): Schema`\n\nTransforms the string value to lowercase. If `strict()` is set it\nwill only validate that the value is lowercase.\n\n#### `string.uppercase(message: ?string): Schema`\n\nTransforms the string value to uppercase. If `strict()` is set it\nwill only validate that the value is uppercase.\n\n### number\n\nDefine a number schema. Supports all the same methods as [`mixed`](#mixed).\n\n```javascript\nvar schema = yup.number();\nschema.isValid(10) //=> true\n```\n\nThe default `cast` logic of `number` is: [`parseFloat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat).\n\nFailed casts return `NaN`.\n\n#### `number.min(limit: number | Ref, message: ?string): Schema`\n\nSet the minimum value allowed. The `${min}` interpolation can be used in the\n`message` argument.\n\n#### `number.max(limit: number | Ref, message: ?string): Schema`\n\nSet the maximum value allowed. The `${max}` interpolation can be used in the\n`message` argument.\n\n#### `number.positive(message: ?string): Schema`\n\nValue must be a positive number.\n\n#### `number.negative(message: ?string): Schema`\n\nValue must be a negative number.\n\n#### `number.integer(message: ?string): Schema`\n\nValidates that a number is an integer.\n\n#### `number.truncate(): Schema`\n\nTransformation that coerces the value to an integer by stripping off the digits\nto the right of the decimal point.\n\n#### `number.round(type: 'floor' | 'ceil' | 'trunc' | 'round' = 'round'): Schema`\n\nAdjusts the value via the specified method of `Math` (defaults to 'round').\n\n### boolean\n\nDefine a boolean schema. Supports all the same methods as [`mixed`](#mixed).\n\n```javascript\nvar schema = yup.boolean();\nschema.isValid(true) //=> true\n```\n\n### date\n\nDefine a Date schema. By default ISO date strings will parse correctly,\nfor more robust parsing options see the extending schema types at the end of the readme.\nSupports all the same methods as [`mixed`](#mixed).\n\n```javascript\nvar schema = yup.date();\nschema.isValid(new Date) //=> true\n```\n\nThe default `cast` logic of `date` is pass the value to the `Date` constructor, failing that, it will attempt\nto parse the date as an ISO date string.\n\nFailed casts return an invalid Date.\n\n\n#### `date.min(limit: Date | string | Ref, message: ?string): Schema`\n\nSet the minimum date allowed. When a string is provided it will attempt to cast to a date first\nand use the result as the limit.\n\n#### `date.max(limit: Date | string | Ref, message: ?string): Schema`\n\nSet the maximum date allowed, When a string is provided it will attempt to cast to a date first\nand use the result as the limit.\n\n### array\n\nDefine an array schema. Arrays can be typed or not, When specifying the element type, `cast` and `isValid`\nwill apply to the elements as well. Options passed into `isValid` are passed also passed to child schemas.\nSupports all the same methods as [`mixed`](#mixed).\n\n```javascript\nvar schema = yup.array().of(number().min(2));\nschema.isValid([2, 3])   //=> true\nschema.isValid([1, -24]) //=> false\n\nschema.cast(['2', '3'])  //=> [2, 3]\n```\n\nYou can also pass a subtype schema to the array constructor as a convenience.\n\n```js\narray().of(number())\n//or\narray(number())\n```\n\nThe default `cast` behavior for `array` is: [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n\nFailed casts return: `null`;\n\n#### `array.of(type: Schema): Schema`\n\nSpecify the schema of array elements. `of()` is optional and when omitted the array schema will\nnot validate its contents.\n\n#### `array.required(message: ?string): Schema`\n\nThe same as the `mixed()` schema required, except that empty arrays are also considered 'missing' values.\nTo allow empty arrays but fail on `undefined` values use: `array().required().min(0)`\n\n#### `array.min(limit: number | Ref, message: ?string): Schema`\n\nSet an minimum length limit for the array. The `${min}` interpolation can be used in the `message` argument.\n\n#### `array.max(limit: number | Ref, message: ?string): Schema`\n\nSet an maximum length limit for the array. The `${max}` interpolation can be used in the `message` argument.\n\n#### `array.ensure(): Schema`\n\nEnsures that the value is an array, by setting the default to `[]` and transforming `null` and `undefined`\nvalues to an empty array as well. Any non-empty, non-array value will be wrapped in an array.\n\n```js\narray().ensure().cast(null) // -> []\narray().ensure().cast(1) // -> [1]\narray().ensure().cast([1]) // -> [1]\n```\n\n#### `array.compact(rejector: (value) => boolean): Schema`\n\nRemoves falsey values from the array. Providing a rejecter function lets you specify the rejection criteria yourself.\n\n```javascript\narray()\n  .compact()\n  .cast(['', 1, 0, 4, false, null]) // => [1,4]\n\narray()\n  .compact(function(v){\n    return v == null\n  })\n  .cast(['', 1, 0, 4, false, null]) // => ['',1, 0, 4, false]\n```\n\n### object\n\nDefine an object schema. Options passed into `isValid` are also passed to child schemas.\nSupports all the same methods as [`mixed`](#mixed).\n\n```javascript\nyup.object().shape({\n  name:      string().required(),\n  age:       number().required().positive().integer(),\n  email:     string().email(),\n  website    string().url(),\n})\n```\n\nYou can also pass a shape to the object constructor as a convenience.\n\n```js\nobject().shape({\n  num: number()\n})\n//or\nobject({\n  num: number()\n})\n```\n\nThe default `cast` behavior for `object` is: [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n\nFailed casts return: `null`;\n\n\n#### `object.shape(fields: object, noSortEdges: ?Array<[string, string]>): Schema`\n\nDefine the keys of the object and the schemas for said keys.\n\n#### `object.from(fromKey: string, toKey: string, alias: boolean = false): Schema`\n\nTransforms the specified key to a new key. If `alias` is `true` then the old key will be left.\n\n```javascript\nvar schema = object({\n    myProp: mixed(),\n    Other: mixed(),\n  })\n  .from('prop', 'myProp')\n  .from('other', 'Other', true)\n\ninst.cast({ prop: 5, other: 6}) // => { myProp: 5, other: 6, Other: 6 }\n```\n\n#### `object.noUnknown(onlyKnownKeys: boolean = true, message: ?string): Schema`\n\nValidate that the object value only contains keys specified in `shape`, pass `false` as the first\nargument to disable the check. Restricting keys to known, also enables `stripUnknown` option, when not in strict mode.\n\n#### `object.camelCase(): Schema`\n\nTransforms all object keys to camelCase\n\n#### `object.constantCase(): Schema`\n\nTransforms all object keys to CONSTANT_CASE.\n\n\n\n## Extending Schema Types\n\nThe simplest way to extend an existing type is just to cache a configured schema and use that through your application.\n\n```js\n  var yup = require('yup');\n  var parseFormats = ['MMM dd, yyy']\n  var invalidDate = new Date('');\n\n  module.exports = yup.date()\n    .transform(function(value, originalValue){\n        if ( this.isType(value) ) return value\n        //the default coercion transform failed so lets try it with Moment instead\n        value = Moment(originalValue, parseFormats)\n        return date.isValid() ? date.toDate() : invalidDate\n    })\n```\n\nAlternatively, each schema is a normal JavaScript constructor function that you can mutate or delegate to\nusing the normal patterns. Generally you should not inherit from `mixed` unless you know what you are doing,\nbetter to think of it as an abstract class. The other types are fair game though.\n\nYou should keep in mind some basic guidelines when extending schemas\n  - never mutate an existing schema, always `clone()` and then mutate the new one before returning it.\n  Built-in methods like `test` and `transform` take care of this for you, so you can safely use them (see below) without worrying\n  - transforms should never mutate the `value` passed in, and should return an invalid object when one exists\n  (`NaN`, `InvalidDate`, etc) instead of `null` for bad values.\n  - by the time validations run the `value` is guaranteed to be the correct type, however if `nullable` is\n  set then `null` is a valid value for that type, so don't assume that a property or method exists on the value.\n\n__Adjust core Types__\n\n```js\nvar invalidDate = new Date('');\n\nfunction parseDateFromFormats(formats, parseStrict) {\n\n  return this.transform(function(value, originalValue){\n    if (this.isType(value))\n      return value\n\n    value = Moment(originalValue, formats, parseStrict)\n\n    return date.isValid() ? date.toDate() : invalidDate\n  })\n}\n\n// `addMethod` doesn't do anything special it's\n// equivalent to: yup.date.protoype.format = parseDateFromFormats\nyup.addMethod(yup.date, 'format', parseDateFromFormats)\n```\n\n__Creating new Types__\n\nYup schema use the common constructor pattern for modeling inheritance. You can use any\nutility or pattern that works with that pattern. The below demonstrates using the es6 class\nsyntax since its less verbose, but you absolutely aren't required to use it.\n\n```js\nvar DateSchema = yup.date\nvar invalidDate = new Date(''); // our failed to coerce value\n\nclass MomentDateSchemaType extends DateSchema {\n  constructor() {\n    super();\n    this._validFormats = [];\n\n    this.withMutation(() => {\n      this.transform(function (value, originalvalue) {\n        if (this.isType(value)) // we have a valid value\n          return value\n        return Moment(originalValue, this._validFormats, true)\n      })\n    })\n  }\n\n  _typeCheck(value) {\n    return super._typeCheck(value)\n        || (moment.isMoment(value) && value.isValid())\n  }\n\n  format(formats) {\n    if (!formats)\n      throw new Error('must enter a valid format')\n    let next = this.clone()\n    next._validFormats = {}.concat(formats);\n  }\n}\n\nvar schema = new MomentDateSchemaType()\n\nschema\n  .format('YYYY-MM-DD')\n  .cast('It is 2012-05-25') // Fri May 25 2012 00:00:00 GMT-0400 (Eastern Daylight Time)\n```\n",
  "readmeFilename": "README.md",
  "release-script": {
    "defaultDryRun": "false"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jquense/yup.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib && npm run toc",
    "clean": "rimaf ./lib/*",
    "lint": "eslint src test",
    "release": "release",
    "tdd": "jest --watch",
    "test": "npm run lint && npm run test-all -- --runInBand",
    "test-all": "npm run testonly -- --projects ./jest-sync.config.js --projects ./package.json",
    "testonly": "jest",
    "toc": "doctoc README.md --github"
  },
  "version": "0.23.0"
}
